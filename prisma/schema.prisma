datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  campaigns Campaign[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id        Int       @id @default(autoincrement())
  name      String
  createdBy String
  creator   User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  archived  Boolean   @default(false)
  expiresAt DateTime?

  pollLinks PollLink[]
  votes     Vote[]     @relation("CampaignVotes")

  @@index([createdBy])
}

model PollLink {
  id         String   @id @default(uuid())
  campaignId Int
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  token       String @unique
  managerName String

  createdAt DateTime @default(now())

  votes Vote[]

  @@index([campaignId])
}

model Vote {
  id         Int      @id @default(autoincrement())
  pollLinkId String
  pollLink   PollLink @relation(fields: [pollLinkId], references: [id], onDelete: Cascade)
  campaignId Int
  campaign   Campaign @relation("CampaignVotes", fields: [campaignId], references: [id], onDelete: Cascade)

  mood    String
  comment String?

  createdAt DateTime @default(now())

  @@index([pollLinkId])
  @@index([campaignId])
}
